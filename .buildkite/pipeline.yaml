_templates:
  common: &common
    timeout_in_minutes: 30
    retry:
      automatic:
        - exit_status: -1
          limit: 10
        - exit_status: "*"
          limit: 2
  benchmarks: &benchmarks
    timeout_in_minutes: 120
    retry:
      automatic: false
    soft_fail: true
    if: build.branch == "master"
    env:
      # BENCHMARKS_OFFICIAL is set from hooks/pre-command, based
      # on whether this is executing on the master branch.
      BENCHMARKS_DATASET: buildkite
      BENCHMARKS_PROJECT: gvisor-benchmarks
      BENCHMARKS_TABLE: benchmarks
      BENCHMARKS_UPLOAD: true
    agents:
      arch: "amd64"
      kvm: "true"
  netstack_test: &netstack_test
    env:
      PACKAGES: >
        ./pkg/tcpip
        ./pkg/tcpip/adapters/gonet
        ./pkg/tcpip/buffer
        ./pkg/tcpip/header
        ./pkg/tcpip/link/channel
        ./pkg/tcpip/network/ipv4
        ./pkg/tcpip/network/ipv6
        ./pkg/tcpip/stack
        ./pkg/tcpip/transport/icmp
        ./pkg/tcpip/transport/tcp
        ./pkg/tcpip/transport/udp
        ./pkg/waiter

steps:
  # Run basic smoke tests before preceding to other tests.
  - <<: *common
    label: ":fire: Smoke tests (AMD64)"
    command: make smoke-tests
    agents:
      arch: "amd64"
  - <<: *common
    label: ":fire: Smoke tests (ARM64)"
    command: make smoke-tests
    agents:
      arch: "arm64"

  - wait
  - <<: *common
    label: ":fire: Smoke race tests"
    command: make smoke-race-tests

  # Check that the Go branch builds. This is not technically required, as this build is maintained
  # as a GitHub action in order to preserve this maintaince across forks. However, providing the
  # action here may provide easier debuggability and diagnosis on failure.
  - <<: *common
    label: ":golang: Go branch"
    commands:
      - tools/go_branch.sh
      - git checkout go && git clean -xf .
      - go build ./...

  # Check that commonly used netstack packages build on various platforms.
  - <<: *common
    <<: *netstack_test
    label: ":mac: Netstack on Mac"
    commands:
      - tools/go_branch.sh
      - git checkout go && git clean -xf .
      - GOOS=darwin GOARCH=arm64 go build $$PACKAGES
  - <<: *common
    <<: *netstack_test
    label: ":windows: Netstack on Windows"
    commands:
      - tools/go_branch.sh
      - git checkout go && git clean -xf .
      - GOOS=windows GOARCH=amd64 go build $$PACKAGES
  - <<: *common
    <<: *netstack_test
    label: ":freebsd: Netstack on FreeBSD"
    commands:
      - tools/go_branch.sh
      - git checkout go && git clean -xf .
      - GOOS=freebsd GOARCH=amd64 go build $$PACKAGES
  - <<: *common
    <<: *netstack_test
    label: ":openbsd: Netstack on OpenBSD"
    commands:
      - tools/go_branch.sh
      - git checkout go && git clean -xf .
      - GOOS=openbsd GOARCH=amd64 go build $$PACKAGES
  - <<: *common
    <<: *netstack_test
    label: ":older_man: Netstack on 32-bit Linux"
    commands:
      - tools/go_branch.sh
      - git checkout go && git clean -xf .
      - GOOS=linux GOARCH=mips go build $$PACKAGES

  # Release workflow.
  - <<: *common
    label: ":ship: Release tests"
    commands:
      - make BAZEL_OPTIONS=--config=x86_64 artifacts/x86_64
      - make BAZEL_OPTIONS=--config=aarch64 artifacts/aarch64
      - make release

  # Images tests.
  - <<: *common
    label: ":docker: Images (x86_64)"
    command: make ARCH=x86_64 load-all-images
    agents:
      arch: "amd64"
  - <<: *common
    label: ":docker: Images (aarch64)"
    command: make ARCH=aarch64 load-all-images
    agents:
      arch: "amd64"

  # Basic unit tests.
  - <<: *common
    label: ":golang: Nogo tests"
    command: make nogo-tests
  - <<: *common
    label: ":test_tube: Unit tests (cgroupv1)"
    command: make unit-tests
    agents:
      cgroup: "v1"
      arch: "amd64"
  - <<: *common
    label: ":test_tube: Unit tests (cgroupv2)"
    command: make unit-tests
    agents:
      cgroup: "v2"
      arch: "amd64"
  - <<: *common
    label: ":test_tube: Container tests (cgroupv1)"
    command: make container-tests
    agents:
      cgroup: "v1"
      kvm: "true"
      arch: "amd64"
  - <<: *common
    label: ":test_tube: Container tests (cgroupv2)"
    command: make container-tests
    agents:
      cgroup: "v2"
      kvm: "true"
      arch: "amd64"

  # All system call tests.
  - <<: *common
    label: ":toolbox: System call tests (AMD64)"
    command: make syscall-tests
    parallelism: 20
    agents:
      arch: "amd64"
      kvm: "true"
  - <<: *common
    label: ":muscle: System call tests (ARM64)"
    command: make BAZEL_OPTIONS=--test_tag_filters=runsc_ptrace syscall-tests
    parallelism: 10
    agents:
      arch: "arm64"

  # Integration tests.
  - <<: *common
    label: ":docker: Docker tests (cgroupv1)"
    command: make docker-tests
    agents:
      arch: "amd64"
      cgroup: "v1"
  - <<: *common
    label: ":docker: Docker tests (cgroupv2)"
    command: make docker-tests
    agents:
      arch: "amd64"
      cgroup: "v2"
  - <<: *common
    label: ":goggles: Overlay tests"
    command: make overlay-tests
    agents:
      arch: "amd64"
  - <<: *common
    label: ":safety_pin: Host network tests"
    command: make hostnet-tests
    agents:
      arch: "amd64"
  - <<: *common
    label: ":satellite: SWGSO tests"
    command: make swgso-tests
    agents:
      arch: "amd64"
  - <<: *common
    label: ":coffee: Do tests"
    command: make do-tests
    agents:
      arch: "amd64"
  - <<: *common
    label: ":person_in_lotus_position: KVM tests"
    command: make kvm-tests
    agents:
      arch: "amd64"
      kvm: "true"
  - <<: *common
    label: ":weight_lifter: Fsstress test"
    command: make fsstress-test
    agents:
      arch: "amd64"
  - <<: *common
    label: ":docker: Containerd 1.3.9 tests"
    command: make containerd-test-1.3.9
    agents:
      arch: "amd64"
  - <<: *common
    label: ":docker: Containerd 1.4.3 tests"
    command: make containerd-test-1.4.3
    agents:
      arch: "amd64"
  - <<: *common
    label: ":docker: Containerd 1.5.4 tests (cgroupv1)"
    command: make containerd-test-1.5.4
    agents:
      cgroup: "v1"
      arch: "amd64"
  - <<: *common
    label: ":docker: Containerd 1.5.4 tests (cgroupv2)"
    command: make containerd-test-1.5.4
    agents:
      cgroup: "v2"
      arch: "amd64"
  - <<: *common
    label: ":docker: Containerd 1.6.0-rc.4 tests (cgroupv1)"
    command: make containerd-test-1.6.0-rc.4
    agents:
      cgroup: "v1"
      arch: "amd64"
  - <<: *common
    label: ":docker: Containerd 1.6.0-rc.4 tests (cgroupv2)"
    command: make containerd-test-1.6.0-rc.4
    agents:
      cgroup: "v2"
      arch: "amd64"

  # Check the website builds.
  - <<: *common
    label: ":earth_americas: Website tests"
    command: make website-build

  # Networking tests.
  - <<: *common
    label: ":table_tennis_paddle_and_ball: IPTables tests"
    command: make iptables-tests
  - <<: *common
    label: ":construction_worker: Packetdrill tests"
    command: make packetdrill-tests
  - <<: *common
    label: ":hammer: Packetimpact tests"
    command: make packetimpact-tests

  # Runtime tests.
  - <<: *common
    label: ":php: PHP runtime tests"
    command: make RUNTIME_LOG_DIR=/tmp/$${BUILDKITE_JOB_ID} php8.1.1-runtime-tests
    parallelism: 10
    agents:
      arch: "amd64"
  - <<: *common
    label: ":java: Java runtime tests"
    command: make RUNTIME_LOG_DIR=/tmp/$${BUILDKITE_JOB_ID} java17-runtime-tests
    parallelism: 40
    agents:
      arch: "amd64"
  - <<: *common
    label: ":golang: Go runtime tests"
    command: make RUNTIME_LOG_DIR=/tmp/$${BUILDKITE_JOB_ID} go1.16-runtime-tests
    parallelism: 10
    agents:
      arch: "amd64"
  - <<: *common
    label: ":node: NodeJS runtime tests"
    command: make RUNTIME_LOG_DIR=/tmp/$${BUILDKITE_JOB_ID} nodejs16.13.2-runtime-tests
    parallelism: 10
    agents:
      arch: "amd64"
  - <<: *common
    label: ":python: Python runtime tests"
    command: make RUNTIME_LOG_DIR=/tmp/$${BUILDKITE_JOB_ID} python3.10.2-runtime-tests
    parallelism: 10
    agents:
      arch: "amd64"

  # Runtime tests (LISAFS).
  - <<: *common
    label: ":php: PHP runtime tests (LISAFS)"
    command: make RUNTIME_LOG_DIR=/tmp/$${BUILDKITE_JOB_ID} php8.1.1-runtime-tests_lisafs
    parallelism: 10
    if: build.message =~ /lisafs/ || build.branch == "master"
    agents:
      arch: "amd64"
  - <<: *common
    label: ":java: Java runtime tests (LISAFS)"
    command: make RUNTIME_LOG_DIR=/tmp/$${BUILDKITE_JOB_ID} java17-runtime-tests_lisafs
    parallelism: 40
    if: build.message =~ /lisafs/ || build.branch == "master"
    agents:
      arch: "amd64"
  - <<: *common
    label: ":golang: Go runtime tests (LISAFS)"
    command: make RUNTIME_LOG_DIR=/tmp/$${BUILDKITE_JOB_ID} go1.16-runtime-tests_lisafs
    parallelism: 10
    if: build.message =~ /lisafs/ || build.branch == "master"
    agents:
      arch: "amd64"
  - <<: *common
    label: ":node: NodeJS runtime tests (LISAFS)"
    command: make RUNTIME_LOG_DIR=/tmp/$${BUILDKITE_JOB_ID} nodejs16.13.2-runtime-tests_lisafs
    parallelism: 10
    if: build.message =~ /lisafs/ || build.branch == "master"
    agents:
      arch: "amd64"
  - <<: *common
    label: ":python: Python runtime tests (LISAFS)"
    command: make RUNTIME_LOG_DIR=/tmp/$${BUILDKITE_JOB_ID} python3.10.2-runtime-tests_lisafs
    parallelism: 10
    if: build.message =~ /lisafs/ || build.branch == "master"
    agents:
      arch: "amd64"

  # Build everything.
  - <<: *common
    label: ":world_map: Build everything"
    command: "make build OPTIONS=--build_tag_filters=-nogo TARGETS=//..."
    agents:
      arch: "amd64"

  # Run basic benchmarks smoke tests (no upload).
  - <<: *common
    label: ":fire: Benchmarks smoke test"
    command: make benchmark-platforms BENCHMARKS_TARGETS=test/benchmarks/base:startup_test BENCHMARKS_FILTER=BenchmarkStartupEmpty BENCHMARKS_OPTIONS=-test.benchtime=1ns
    # Use the opposite of the benchmarks filter.
    if: build.branch != "master"
    agents:
      arch: "amd64"

  # Run all benchmarks.
  - <<: *benchmarks
    label: ":bazel: ABSL build benchmarks"
    command: make -i benchmark-platforms BENCHMARKS_FILTER="ABSL/page_cache.clean" BENCHMARKS_SUITE=absl BENCHMARKS_TARGETS=test/benchmarks/fs:bazel_test BENCHMARKS_OPTIONS=-test.benchtime=1ns
  - <<: *benchmarks
    label: ":go: runsc build benchmarks"
    command: make -i benchmark-platforms BENCHMARKS_FILTER="Runsc/page_cache.clean/filesystem.bind" BENCHMARKS_SUITE=runsc BENCHMARKS_TARGETS=test/benchmarks/fs:bazel_test BENCHMARKS_OPTIONS=-test.benchtime=1ns
  - <<: *benchmarks
    label: ":metal: FFMPEG benchmarks"
    command: make -i benchmark-platforms BENCHMARKS_SUITE=ffmpeg BENCHMARKS_TARGETS=test/benchmarks/media:ffmpeg_test BENCHMARKS_OPTIONS=-test.benchtime=1ns
  # For fio, running with --test.benchtime=Xs scales the written/read
  # bytes to several GB. This is not a problem for root/bind/volume mounts,
  # but for tmpfs mounts, the size can grow to more memory than the machine
  # has availabe. Fix the runs to 1GB written/read for the benchmark.
  - <<: *benchmarks
    label: ":floppy_disk: FIO benchmarks (read/write)"
    command: make -i benchmark-platforms BENCHMARKS_SUITE=fio BENCHMARKS_TARGETS=test/benchmarks/fs:fio_test BENCHMARKS_FILTER=Fio/operation\.[rw][er] BENCHMARKS_OPTIONS=--test.benchtime=1000x
  # For rand(read|write) fio benchmarks, running 15s does not overwhelm the system for tmpfs mounts.
  - <<: *benchmarks
    label: ":cd: FIO benchmarks (randread/randwrite)"
    command: make -i benchmark-platforms BENCHMARKS_SUITE=fio BENCHMARKS_TARGETS=test/benchmarks/fs:fio_test BENCHMARKS_FILTER=Fio/operation\.rand BENCHMARKS_OPTIONS=--test.benchtime=15s
  - <<: *benchmarks
    label: ":globe_with_meridians: HTTPD benchmarks"
    command: make -i benchmark-platforms BENCHMARKS_FILTER="Continuous" BENCHMARKS_SUITE=httpd BENCHMARKS_TARGETS=test/benchmarks/network:httpd_test
  - <<: *benchmarks
    label: ":piedpiper: iperf benchmarks"
    command: make -i benchmark-platforms BENCHMARKS_SUITE=iperf BENCHMARKS_TARGETS=test/benchmarks/network:iperf_test
  - <<: *benchmarks
    label: ":nginx: nginx benchmarks"
    command: make -i benchmark-platforms BENCHMARKS_FILTER="Continuous" BENCHMARKS_SUITE=nginx BENCHMARKS_TARGETS=test/benchmarks/network:nginx_test
  - <<: *benchmarks
    label: ":node: node benchmarks"
    command: make -i benchmark-platforms BENCHMARKS_SUITE=node BENCHMARKS_TARGETS=test/benchmarks/network:node_test
  - <<: *benchmarks
    label: ":redis: Redis benchmarks"
    command: make -i benchmark-platforms BENCHMARKS_SUITE=redis BENCHMARKS_TARGETS=test/benchmarks/database:redis_test BENCHMARKS_OPTIONS=-test.benchtime=15s
  - <<: *benchmarks
    label: ":ruby: Ruby benchmarks"
    command: make -i benchmark-platforms BENCHMARKS_SUITE=ruby BENCHMARKS_TARGETS=test/benchmarks/network:ruby_test
  - <<: *benchmarks
    label: ":weight_lifter: Size benchmarks"
    command: make -i benchmark-platforms  BENCHMARKS_SUITE=size BENCHMARKS_TARGETS=test/benchmarks/base:size_test
  - <<: *benchmarks
    label: ":speedboat: Startup benchmarks"
    command: make -i benchmark-platforms BENCHMARKS_SUITE=startup BENCHMARKS_TARGETS=test/benchmarks/base:startup_test
  - <<: *benchmarks
    label: ":computer: sysbench benchmarks"
    command: make -i benchmark-platforms BENCHMARKS_SUITE=sysbench BENCHMARKS_TARGETS=test/benchmarks/base:sysbench_test
  - <<: *benchmarks
    label: ":tensorflow: TensorFlow benchmarks"
    command: make -i benchmark-platforms BENCHMARKS_SUITE=tensorflow BENCHMARKS_TARGETS=test/benchmarks/ml:tensorflow_test BENCHMARKS_OPTIONS=-test.benchtime=1ns
