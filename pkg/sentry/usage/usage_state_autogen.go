// automatically generated by stateify.

package usage

import (
	"gvisor.dev/gvisor/pkg/state"
)

func (x *CPUStats) beforeSave() {}
func (x *CPUStats) save(m state.Map) {
	x.beforeSave()
	m.Save("UserTime", &x.UserTime)
	m.Save("SysTime", &x.SysTime)
	m.Save("VoluntarySwitches", &x.VoluntarySwitches)
}

func (x *CPUStats) afterLoad() {}
func (x *CPUStats) load(m state.Map) {
	m.Load("UserTime", &x.UserTime)
	m.Load("SysTime", &x.SysTime)
	m.Load("VoluntarySwitches", &x.VoluntarySwitches)
}

func (x *IO) beforeSave() {}
func (x *IO) save(m state.Map) {
	x.beforeSave()
	m.Save("CharsRead", &x.CharsRead)
	m.Save("CharsWritten", &x.CharsWritten)
	m.Save("ReadSyscalls", &x.ReadSyscalls)
	m.Save("WriteSyscalls", &x.WriteSyscalls)
	m.Save("BytesRead", &x.BytesRead)
	m.Save("BytesWritten", &x.BytesWritten)
	m.Save("BytesWriteCancelled", &x.BytesWriteCancelled)
}

func (x *IO) afterLoad() {}
func (x *IO) load(m state.Map) {
	m.Load("CharsRead", &x.CharsRead)
	m.Load("CharsWritten", &x.CharsWritten)
	m.Load("ReadSyscalls", &x.ReadSyscalls)
	m.Load("WriteSyscalls", &x.WriteSyscalls)
	m.Load("BytesRead", &x.BytesRead)
	m.Load("BytesWritten", &x.BytesWritten)
	m.Load("BytesWriteCancelled", &x.BytesWriteCancelled)
}

func init() {
	state.Register("pkg/sentry/usage.CPUStats", (*CPUStats)(nil), state.Fns{Save: (*CPUStats).save, Load: (*CPUStats).load})
	state.Register("pkg/sentry/usage.IO", (*IO)(nil), state.Fns{Save: (*IO).save, Load: (*IO).load})
}
