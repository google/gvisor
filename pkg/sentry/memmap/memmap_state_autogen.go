// automatically generated by stateify.

package memmap

import (
	"gvisor.dev/gvisor/pkg/state"
)

func (x *MappableRange) beforeSave() {}
func (x *MappableRange) save(m state.Map) {
	x.beforeSave()
	m.Save("Start", &x.Start)
	m.Save("End", &x.End)
}

func (x *MappableRange) afterLoad() {}
func (x *MappableRange) load(m state.Map) {
	m.Load("Start", &x.Start)
	m.Load("End", &x.End)
}

func (x *MappingOfRange) beforeSave() {}
func (x *MappingOfRange) save(m state.Map) {
	x.beforeSave()
	m.Save("MappingSpace", &x.MappingSpace)
	m.Save("AddrRange", &x.AddrRange)
	m.Save("Writable", &x.Writable)
}

func (x *MappingOfRange) afterLoad() {}
func (x *MappingOfRange) load(m state.Map) {
	m.Load("MappingSpace", &x.MappingSpace)
	m.Load("AddrRange", &x.AddrRange)
	m.Load("Writable", &x.Writable)
}

func init() {
	state.Register("pkg/sentry/memmap.MappableRange", (*MappableRange)(nil), state.Fns{Save: (*MappableRange).save, Load: (*MappableRange).load})
	state.Register("pkg/sentry/memmap.MappingOfRange", (*MappingOfRange)(nil), state.Fns{Save: (*MappingOfRange).save, Load: (*MappingOfRange).load})
}
