load("//tools:defs.bzl", "go_library")

package(licenses = ["notice"])

go_library(
    name = "vfs2",
    srcs = [
        "aio.go",
        "epoll.go",
        "eventfd.go",
        "execve.go",
        "fd.go",
        "filesystem.go",
        "fscontext.go",
        "getdents.go",
        "inotify.go",
        "ioctl.go",
        "lock.go",
        "memfd.go",
        "mmap.go",
        "mount.go",
        "path.go",
        "pipe.go",
        "poll.go",
        "read_write.go",
        "setstat.go",
        "signal.go",
        "socket.go",
        "splice.go",
        "stat.go",
        "stat_amd64.go",
        "stat_arm64.go",
        "sync.go",
        "timerfd.go",
        "vfs2.go",
        "xattr.go",
    ],
    marshal = True,
    visibility = ["//:sandbox"],
    deps = [
        "//pkg/abi/linux",
        "//pkg/binary",
        "//pkg/bits",
        "//pkg/context",
        "//pkg/fspath",
        "//pkg/gohacks",
        "//pkg/sentry/arch",
        "//pkg/sentry/fs/lock",
        "//pkg/sentry/fsbridge",
        "//pkg/sentry/fsimpl/eventfd",
        "//pkg/sentry/fsimpl/pipefs",
        "//pkg/sentry/fsimpl/signalfd",
        "//pkg/sentry/fsimpl/timerfd",
        "//pkg/sentry/fsimpl/tmpfs",
        "//pkg/sentry/kernel",
        "//pkg/sentry/kernel/auth",
        "//pkg/sentry/kernel/fasync",
        "//pkg/sentry/kernel/pipe",
        "//pkg/sentry/kernel/time",
        "//pkg/sentry/limits",
        "//pkg/sentry/loader",
        "//pkg/sentry/memmap",
        "//pkg/sentry/mm",
        "//pkg/sentry/socket",
        "//pkg/sentry/socket/control",
        "//pkg/sentry/socket/unix/transport",
        "//pkg/sentry/syscalls",
        "//pkg/sentry/syscalls/linux",
        "//pkg/sentry/vfs",
        "//pkg/sync",
        "//pkg/syserr",
        "//pkg/syserror",
        "//pkg/usermem",
        "//pkg/waiter",
        "//tools/go_marshal/marshal",
        "//tools/go_marshal/primitive",
    ],
)
