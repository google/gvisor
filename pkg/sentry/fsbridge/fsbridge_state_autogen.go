// automatically generated by stateify.

package fsbridge

import (
	"gvisor.dev/gvisor/pkg/state"
)

func (x *fsFile) beforeSave() {}
func (x *fsFile) save(m state.Map) {
	x.beforeSave()
	m.Save("file", &x.file)
}

func (x *fsFile) afterLoad() {}
func (x *fsFile) load(m state.Map) {
	m.Load("file", &x.file)
}

func (x *fsLookup) beforeSave() {}
func (x *fsLookup) save(m state.Map) {
	x.beforeSave()
	m.Save("mntns", &x.mntns)
	m.Save("root", &x.root)
	m.Save("workingDir", &x.workingDir)
}

func (x *fsLookup) afterLoad() {}
func (x *fsLookup) load(m state.Map) {
	m.Load("mntns", &x.mntns)
	m.Load("root", &x.root)
	m.Load("workingDir", &x.workingDir)
}

func (x *VFSFile) beforeSave() {}
func (x *VFSFile) save(m state.Map) {
	x.beforeSave()
	m.Save("file", &x.file)
}

func (x *VFSFile) afterLoad() {}
func (x *VFSFile) load(m state.Map) {
	m.Load("file", &x.file)
}

func (x *vfsLookup) beforeSave() {}
func (x *vfsLookup) save(m state.Map) {
	x.beforeSave()
	m.Save("mntns", &x.mntns)
	m.Save("root", &x.root)
	m.Save("workingDir", &x.workingDir)
}

func (x *vfsLookup) afterLoad() {}
func (x *vfsLookup) load(m state.Map) {
	m.Load("mntns", &x.mntns)
	m.Load("root", &x.root)
	m.Load("workingDir", &x.workingDir)
}

func init() {
	state.Register("pkg/sentry/fsbridge.fsFile", (*fsFile)(nil), state.Fns{Save: (*fsFile).save, Load: (*fsFile).load})
	state.Register("pkg/sentry/fsbridge.fsLookup", (*fsLookup)(nil), state.Fns{Save: (*fsLookup).save, Load: (*fsLookup).load})
	state.Register("pkg/sentry/fsbridge.VFSFile", (*VFSFile)(nil), state.Fns{Save: (*VFSFile).save, Load: (*VFSFile).load})
	state.Register("pkg/sentry/fsbridge.vfsLookup", (*vfsLookup)(nil), state.Fns{Save: (*vfsLookup).save, Load: (*vfsLookup).load})
}
