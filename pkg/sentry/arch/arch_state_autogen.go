// automatically generated by stateify.

// +build amd64 386
// +build amd64 386
// +build 386 amd64 arm64

package arch

import (
	"gvisor.dev/gvisor/pkg/state"
)

func (x *MmapLayout) beforeSave() {}
func (x *MmapLayout) save(m state.Map) {
	x.beforeSave()
	m.Save("MinAddr", &x.MinAddr)
	m.Save("MaxAddr", &x.MaxAddr)
	m.Save("BottomUpBase", &x.BottomUpBase)
	m.Save("TopDownBase", &x.TopDownBase)
	m.Save("DefaultDirection", &x.DefaultDirection)
	m.Save("MaxStackRand", &x.MaxStackRand)
}

func (x *MmapLayout) afterLoad() {}
func (x *MmapLayout) load(m state.Map) {
	m.Load("MinAddr", &x.MinAddr)
	m.Load("MaxAddr", &x.MaxAddr)
	m.Load("BottomUpBase", &x.BottomUpBase)
	m.Load("TopDownBase", &x.TopDownBase)
	m.Load("DefaultDirection", &x.DefaultDirection)
	m.Load("MaxStackRand", &x.MaxStackRand)
}

func (x *syscallPtraceRegs) beforeSave() {}
func (x *syscallPtraceRegs) save(m state.Map) {
	x.beforeSave()
	m.Save("R15", &x.R15)
	m.Save("R14", &x.R14)
	m.Save("R13", &x.R13)
	m.Save("R12", &x.R12)
	m.Save("Rbp", &x.Rbp)
	m.Save("Rbx", &x.Rbx)
	m.Save("R11", &x.R11)
	m.Save("R10", &x.R10)
	m.Save("R9", &x.R9)
	m.Save("R8", &x.R8)
	m.Save("Rax", &x.Rax)
	m.Save("Rcx", &x.Rcx)
	m.Save("Rdx", &x.Rdx)
	m.Save("Rsi", &x.Rsi)
	m.Save("Rdi", &x.Rdi)
	m.Save("Orig_rax", &x.Orig_rax)
	m.Save("Rip", &x.Rip)
	m.Save("Cs", &x.Cs)
	m.Save("Eflags", &x.Eflags)
	m.Save("Rsp", &x.Rsp)
	m.Save("Ss", &x.Ss)
	m.Save("Fs_base", &x.Fs_base)
	m.Save("Gs_base", &x.Gs_base)
	m.Save("Ds", &x.Ds)
	m.Save("Es", &x.Es)
	m.Save("Fs", &x.Fs)
	m.Save("Gs", &x.Gs)
}

func (x *syscallPtraceRegs) afterLoad() {}
func (x *syscallPtraceRegs) load(m state.Map) {
	m.Load("R15", &x.R15)
	m.Load("R14", &x.R14)
	m.Load("R13", &x.R13)
	m.Load("R12", &x.R12)
	m.Load("Rbp", &x.Rbp)
	m.Load("Rbx", &x.Rbx)
	m.Load("R11", &x.R11)
	m.Load("R10", &x.R10)
	m.Load("R9", &x.R9)
	m.Load("R8", &x.R8)
	m.Load("Rax", &x.Rax)
	m.Load("Rcx", &x.Rcx)
	m.Load("Rdx", &x.Rdx)
	m.Load("Rsi", &x.Rsi)
	m.Load("Rdi", &x.Rdi)
	m.Load("Orig_rax", &x.Orig_rax)
	m.Load("Rip", &x.Rip)
	m.Load("Cs", &x.Cs)
	m.Load("Eflags", &x.Eflags)
	m.Load("Rsp", &x.Rsp)
	m.Load("Ss", &x.Ss)
	m.Load("Fs_base", &x.Fs_base)
	m.Load("Gs_base", &x.Gs_base)
	m.Load("Ds", &x.Ds)
	m.Load("Es", &x.Es)
	m.Load("Fs", &x.Fs)
	m.Load("Gs", &x.Gs)
}

func (x *AuxEntry) beforeSave() {}
func (x *AuxEntry) save(m state.Map) {
	x.beforeSave()
	m.Save("Key", &x.Key)
	m.Save("Value", &x.Value)
}

func (x *AuxEntry) afterLoad() {}
func (x *AuxEntry) load(m state.Map) {
	m.Load("Key", &x.Key)
	m.Load("Value", &x.Value)
}

func (x *SignalAct) beforeSave() {}
func (x *SignalAct) save(m state.Map) {
	x.beforeSave()
	m.Save("Handler", &x.Handler)
	m.Save("Flags", &x.Flags)
	m.Save("Restorer", &x.Restorer)
	m.Save("Mask", &x.Mask)
}

func (x *SignalAct) afterLoad() {}
func (x *SignalAct) load(m state.Map) {
	m.Load("Handler", &x.Handler)
	m.Load("Flags", &x.Flags)
	m.Load("Restorer", &x.Restorer)
	m.Load("Mask", &x.Mask)
}

func (x *SignalStack) beforeSave() {}
func (x *SignalStack) save(m state.Map) {
	x.beforeSave()
	m.Save("Addr", &x.Addr)
	m.Save("Flags", &x.Flags)
	m.Save("Size", &x.Size)
}

func (x *SignalStack) afterLoad() {}
func (x *SignalStack) load(m state.Map) {
	m.Load("Addr", &x.Addr)
	m.Load("Flags", &x.Flags)
	m.Load("Size", &x.Size)
}

func (x *SignalInfo) beforeSave() {}
func (x *SignalInfo) save(m state.Map) {
	x.beforeSave()
	m.Save("Signo", &x.Signo)
	m.Save("Errno", &x.Errno)
	m.Save("Code", &x.Code)
	m.Save("Fields", &x.Fields)
}

func (x *SignalInfo) afterLoad() {}
func (x *SignalInfo) load(m state.Map) {
	m.Load("Signo", &x.Signo)
	m.Load("Errno", &x.Errno)
	m.Load("Code", &x.Code)
	m.Load("Fields", &x.Fields)
}

func init() {
	state.Register("pkg/sentry/arch.MmapLayout", (*MmapLayout)(nil), state.Fns{Save: (*MmapLayout).save, Load: (*MmapLayout).load})
	state.Register("pkg/sentry/arch.syscallPtraceRegs", (*syscallPtraceRegs)(nil), state.Fns{Save: (*syscallPtraceRegs).save, Load: (*syscallPtraceRegs).load})
	state.Register("pkg/sentry/arch.AuxEntry", (*AuxEntry)(nil), state.Fns{Save: (*AuxEntry).save, Load: (*AuxEntry).load})
	state.Register("pkg/sentry/arch.SignalAct", (*SignalAct)(nil), state.Fns{Save: (*SignalAct).save, Load: (*SignalAct).load})
	state.Register("pkg/sentry/arch.SignalStack", (*SignalStack)(nil), state.Fns{Save: (*SignalStack).save, Load: (*SignalStack).load})
	state.Register("pkg/sentry/arch.SignalInfo", (*SignalInfo)(nil), state.Fns{Save: (*SignalInfo).save, Load: (*SignalInfo).load})
}
