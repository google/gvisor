// automatically generated by stateify.

// +build amd64 386

package arch

import (
	"gvisor.dev/gvisor/pkg/state"
)

func (x *State) beforeSave() {}
func (x *State) save(m state.Map) {
	x.beforeSave()
	var Regs syscallPtraceRegs = x.saveRegs()
	m.SaveValue("Regs", Regs)
	m.Save("x86FPState", &x.x86FPState)
	m.Save("FeatureSet", &x.FeatureSet)
}

func (x *State) load(m state.Map) {
	m.LoadWait("x86FPState", &x.x86FPState)
	m.Load("FeatureSet", &x.FeatureSet)
	m.LoadValue("Regs", new(syscallPtraceRegs), func(y interface{}) { x.loadRegs(y.(syscallPtraceRegs)) })
	m.AfterLoad(x.afterLoad)
}

func init() {
	state.Register("pkg/sentry/arch.State", (*State)(nil), state.Fns{Save: (*State).save, Load: (*State).load})
}
