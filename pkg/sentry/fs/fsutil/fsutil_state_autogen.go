// automatically generated by stateify.

package fsutil

import (
	"gvisor.dev/gvisor/pkg/state"
)

func (x *DirtyInfo) beforeSave() {}
func (x *DirtyInfo) save(m state.Map) {
	x.beforeSave()
	m.Save("Keep", &x.Keep)
}

func (x *DirtyInfo) afterLoad() {}
func (x *DirtyInfo) load(m state.Map) {
	m.Load("Keep", &x.Keep)
}

func (x *StaticDirFileOperations) beforeSave() {}
func (x *StaticDirFileOperations) save(m state.Map) {
	x.beforeSave()
	m.Save("dentryMap", &x.dentryMap)
	m.Save("dirCursor", &x.dirCursor)
}

func (x *StaticDirFileOperations) afterLoad() {}
func (x *StaticDirFileOperations) load(m state.Map) {
	m.Load("dentryMap", &x.dentryMap)
	m.Load("dirCursor", &x.dirCursor)
}

func (x *NoReadWriteFile) beforeSave() {}
func (x *NoReadWriteFile) save(m state.Map) {
	x.beforeSave()
}

func (x *NoReadWriteFile) afterLoad() {}
func (x *NoReadWriteFile) load(m state.Map) {
}

func (x *FileStaticContentReader) beforeSave() {}
func (x *FileStaticContentReader) save(m state.Map) {
	x.beforeSave()
	m.Save("content", &x.content)
}

func (x *FileStaticContentReader) afterLoad() {}
func (x *FileStaticContentReader) load(m state.Map) {
	m.Load("content", &x.content)
}

func (x *HostFileMapper) beforeSave() {}
func (x *HostFileMapper) save(m state.Map) {
	x.beforeSave()
	m.Save("refs", &x.refs)
}

func (x *HostFileMapper) load(m state.Map) {
	m.Load("refs", &x.refs)
	m.AfterLoad(x.afterLoad)
}

func (x *HostMappable) beforeSave() {}
func (x *HostMappable) save(m state.Map) {
	x.beforeSave()
	m.Save("hostFileMapper", &x.hostFileMapper)
	m.Save("backingFile", &x.backingFile)
	m.Save("mappings", &x.mappings)
}

func (x *HostMappable) afterLoad() {}
func (x *HostMappable) load(m state.Map) {
	m.Load("hostFileMapper", &x.hostFileMapper)
	m.Load("backingFile", &x.backingFile)
	m.Load("mappings", &x.mappings)
}

func (x *SimpleFileInode) beforeSave() {}
func (x *SimpleFileInode) save(m state.Map) {
	x.beforeSave()
	m.Save("InodeSimpleAttributes", &x.InodeSimpleAttributes)
}

func (x *SimpleFileInode) afterLoad() {}
func (x *SimpleFileInode) load(m state.Map) {
	m.Load("InodeSimpleAttributes", &x.InodeSimpleAttributes)
}

func (x *NoReadWriteFileInode) beforeSave() {}
func (x *NoReadWriteFileInode) save(m state.Map) {
	x.beforeSave()
	m.Save("InodeSimpleAttributes", &x.InodeSimpleAttributes)
}

func (x *NoReadWriteFileInode) afterLoad() {}
func (x *NoReadWriteFileInode) load(m state.Map) {
	m.Load("InodeSimpleAttributes", &x.InodeSimpleAttributes)
}

func (x *InodeSimpleAttributes) beforeSave() {}
func (x *InodeSimpleAttributes) save(m state.Map) {
	x.beforeSave()
	m.Save("fsType", &x.fsType)
	m.Save("unstable", &x.unstable)
}

func (x *InodeSimpleAttributes) afterLoad() {}
func (x *InodeSimpleAttributes) load(m state.Map) {
	m.Load("fsType", &x.fsType)
	m.Load("unstable", &x.unstable)
}

func (x *InodeSimpleExtendedAttributes) beforeSave() {}
func (x *InodeSimpleExtendedAttributes) save(m state.Map) {
	x.beforeSave()
	m.Save("xattrs", &x.xattrs)
}

func (x *InodeSimpleExtendedAttributes) afterLoad() {}
func (x *InodeSimpleExtendedAttributes) load(m state.Map) {
	m.Load("xattrs", &x.xattrs)
}

func (x *staticFile) beforeSave() {}
func (x *staticFile) save(m state.Map) {
	x.beforeSave()
	m.Save("FileStaticContentReader", &x.FileStaticContentReader)
}

func (x *staticFile) afterLoad() {}
func (x *staticFile) load(m state.Map) {
	m.Load("FileStaticContentReader", &x.FileStaticContentReader)
}

func (x *InodeStaticFileGetter) beforeSave() {}
func (x *InodeStaticFileGetter) save(m state.Map) {
	x.beforeSave()
	m.Save("Contents", &x.Contents)
}

func (x *InodeStaticFileGetter) afterLoad() {}
func (x *InodeStaticFileGetter) load(m state.Map) {
	m.Load("Contents", &x.Contents)
}

func (x *CachingInodeOperations) beforeSave() {}
func (x *CachingInodeOperations) save(m state.Map) {
	x.beforeSave()
	m.Save("backingFile", &x.backingFile)
	m.Save("mfp", &x.mfp)
	m.Save("opts", &x.opts)
	m.Save("attr", &x.attr)
	m.Save("dirtyAttr", &x.dirtyAttr)
	m.Save("mappings", &x.mappings)
	m.Save("cache", &x.cache)
	m.Save("dirty", &x.dirty)
	m.Save("hostFileMapper", &x.hostFileMapper)
	m.Save("refs", &x.refs)
}

func (x *CachingInodeOperations) afterLoad() {}
func (x *CachingInodeOperations) load(m state.Map) {
	m.Load("backingFile", &x.backingFile)
	m.Load("mfp", &x.mfp)
	m.Load("opts", &x.opts)
	m.Load("attr", &x.attr)
	m.Load("dirtyAttr", &x.dirtyAttr)
	m.Load("mappings", &x.mappings)
	m.Load("cache", &x.cache)
	m.Load("dirty", &x.dirty)
	m.Load("hostFileMapper", &x.hostFileMapper)
	m.Load("refs", &x.refs)
}

func (x *CachingInodeOperationsOptions) beforeSave() {}
func (x *CachingInodeOperationsOptions) save(m state.Map) {
	x.beforeSave()
	m.Save("ForcePageCache", &x.ForcePageCache)
	m.Save("LimitHostFDTranslation", &x.LimitHostFDTranslation)
}

func (x *CachingInodeOperationsOptions) afterLoad() {}
func (x *CachingInodeOperationsOptions) load(m state.Map) {
	m.Load("ForcePageCache", &x.ForcePageCache)
	m.Load("LimitHostFDTranslation", &x.LimitHostFDTranslation)
}

func init() {
	state.Register("pkg/sentry/fs/fsutil.DirtyInfo", (*DirtyInfo)(nil), state.Fns{Save: (*DirtyInfo).save, Load: (*DirtyInfo).load})
	state.Register("pkg/sentry/fs/fsutil.StaticDirFileOperations", (*StaticDirFileOperations)(nil), state.Fns{Save: (*StaticDirFileOperations).save, Load: (*StaticDirFileOperations).load})
	state.Register("pkg/sentry/fs/fsutil.NoReadWriteFile", (*NoReadWriteFile)(nil), state.Fns{Save: (*NoReadWriteFile).save, Load: (*NoReadWriteFile).load})
	state.Register("pkg/sentry/fs/fsutil.FileStaticContentReader", (*FileStaticContentReader)(nil), state.Fns{Save: (*FileStaticContentReader).save, Load: (*FileStaticContentReader).load})
	state.Register("pkg/sentry/fs/fsutil.HostFileMapper", (*HostFileMapper)(nil), state.Fns{Save: (*HostFileMapper).save, Load: (*HostFileMapper).load})
	state.Register("pkg/sentry/fs/fsutil.HostMappable", (*HostMappable)(nil), state.Fns{Save: (*HostMappable).save, Load: (*HostMappable).load})
	state.Register("pkg/sentry/fs/fsutil.SimpleFileInode", (*SimpleFileInode)(nil), state.Fns{Save: (*SimpleFileInode).save, Load: (*SimpleFileInode).load})
	state.Register("pkg/sentry/fs/fsutil.NoReadWriteFileInode", (*NoReadWriteFileInode)(nil), state.Fns{Save: (*NoReadWriteFileInode).save, Load: (*NoReadWriteFileInode).load})
	state.Register("pkg/sentry/fs/fsutil.InodeSimpleAttributes", (*InodeSimpleAttributes)(nil), state.Fns{Save: (*InodeSimpleAttributes).save, Load: (*InodeSimpleAttributes).load})
	state.Register("pkg/sentry/fs/fsutil.InodeSimpleExtendedAttributes", (*InodeSimpleExtendedAttributes)(nil), state.Fns{Save: (*InodeSimpleExtendedAttributes).save, Load: (*InodeSimpleExtendedAttributes).load})
	state.Register("pkg/sentry/fs/fsutil.staticFile", (*staticFile)(nil), state.Fns{Save: (*staticFile).save, Load: (*staticFile).load})
	state.Register("pkg/sentry/fs/fsutil.InodeStaticFileGetter", (*InodeStaticFileGetter)(nil), state.Fns{Save: (*InodeStaticFileGetter).save, Load: (*InodeStaticFileGetter).load})
	state.Register("pkg/sentry/fs/fsutil.CachingInodeOperations", (*CachingInodeOperations)(nil), state.Fns{Save: (*CachingInodeOperations).save, Load: (*CachingInodeOperations).load})
	state.Register("pkg/sentry/fs/fsutil.CachingInodeOperationsOptions", (*CachingInodeOperationsOptions)(nil), state.Fns{Save: (*CachingInodeOperationsOptions).save, Load: (*CachingInodeOperationsOptions).load})
}
