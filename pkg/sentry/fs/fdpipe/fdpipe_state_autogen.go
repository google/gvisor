// automatically generated by stateify.

package fdpipe

import (
	"gvisor.dev/gvisor/pkg/sentry/fs"
	"gvisor.dev/gvisor/pkg/state"
)

func (x *pipeOperations) save(m state.Map) {
	x.beforeSave()
	var flags fs.FileFlags = x.saveFlags()
	m.SaveValue("flags", flags)
	m.Save("opener", &x.opener)
	m.Save("readAheadBuffer", &x.readAheadBuffer)
}

func (x *pipeOperations) load(m state.Map) {
	m.LoadWait("opener", &x.opener)
	m.Load("readAheadBuffer", &x.readAheadBuffer)
	m.LoadValue("flags", new(fs.FileFlags), func(y interface{}) { x.loadFlags(y.(fs.FileFlags)) })
	m.AfterLoad(x.afterLoad)
}

func init() {
	state.Register("pkg/sentry/fs/fdpipe.pipeOperations", (*pipeOperations)(nil), state.Fns{Save: (*pipeOperations).save, Load: (*pipeOperations).load})
}
