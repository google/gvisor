// automatically generated by stateify.

package device

import (
	"gvisor.dev/gvisor/pkg/state"
)

func (x *Registry) beforeSave() {}
func (x *Registry) save(m state.Map) {
	x.beforeSave()
	m.Save("lastAnonDeviceMinor", &x.lastAnonDeviceMinor)
	m.Save("devices", &x.devices)
}

func (x *Registry) afterLoad() {}
func (x *Registry) load(m state.Map) {
	m.Load("lastAnonDeviceMinor", &x.lastAnonDeviceMinor)
	m.Load("devices", &x.devices)
}

func (x *ID) beforeSave() {}
func (x *ID) save(m state.Map) {
	x.beforeSave()
	m.Save("Major", &x.Major)
	m.Save("Minor", &x.Minor)
}

func (x *ID) afterLoad() {}
func (x *ID) load(m state.Map) {
	m.Load("Major", &x.Major)
	m.Load("Minor", &x.Minor)
}

func (x *Device) beforeSave() {}
func (x *Device) save(m state.Map) {
	x.beforeSave()
	m.Save("ID", &x.ID)
	m.Save("last", &x.last)
}

func (x *Device) afterLoad() {}
func (x *Device) load(m state.Map) {
	m.Load("ID", &x.ID)
	m.Load("last", &x.last)
}

func init() {
	state.Register("pkg/sentry/device.Registry", (*Registry)(nil), state.Fns{Save: (*Registry).save, Load: (*Registry).load})
	state.Register("pkg/sentry/device.ID", (*ID)(nil), state.Fns{Save: (*ID).save, Load: (*ID).load})
	state.Register("pkg/sentry/device.Device", (*Device)(nil), state.Fns{Save: (*Device).save, Load: (*Device).load})
}
