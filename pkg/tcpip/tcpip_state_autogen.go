// automatically generated by stateify.

// +build go1.9
// +build !go1.15

package tcpip

import (
	"gvisor.dev/gvisor/pkg/state"
)

func (x *FullAddress) beforeSave() {}
func (x *FullAddress) save(m state.Map) {
	x.beforeSave()
	m.Save("NIC", &x.NIC)
	m.Save("Addr", &x.Addr)
	m.Save("Port", &x.Port)
}

func (x *FullAddress) afterLoad() {}
func (x *FullAddress) load(m state.Map) {
	m.Load("NIC", &x.NIC)
	m.Load("Addr", &x.Addr)
	m.Load("Port", &x.Port)
}

func (x *ControlMessages) beforeSave() {}
func (x *ControlMessages) save(m state.Map) {
	x.beforeSave()
	m.Save("HasTimestamp", &x.HasTimestamp)
	m.Save("Timestamp", &x.Timestamp)
	m.Save("HasInq", &x.HasInq)
	m.Save("Inq", &x.Inq)
	m.Save("HasTOS", &x.HasTOS)
	m.Save("TOS", &x.TOS)
	m.Save("HasTClass", &x.HasTClass)
	m.Save("TClass", &x.TClass)
	m.Save("HasIPPacketInfo", &x.HasIPPacketInfo)
	m.Save("PacketInfo", &x.PacketInfo)
}

func (x *ControlMessages) afterLoad() {}
func (x *ControlMessages) load(m state.Map) {
	m.Load("HasTimestamp", &x.HasTimestamp)
	m.Load("Timestamp", &x.Timestamp)
	m.Load("HasInq", &x.HasInq)
	m.Load("Inq", &x.Inq)
	m.Load("HasTOS", &x.HasTOS)
	m.Load("TOS", &x.TOS)
	m.Load("HasTClass", &x.HasTClass)
	m.Load("TClass", &x.TClass)
	m.Load("HasIPPacketInfo", &x.HasIPPacketInfo)
	m.Load("PacketInfo", &x.PacketInfo)
}

func (x *IPPacketInfo) beforeSave() {}
func (x *IPPacketInfo) save(m state.Map) {
	x.beforeSave()
	m.Save("NIC", &x.NIC)
	m.Save("LocalAddr", &x.LocalAddr)
	m.Save("DestinationAddr", &x.DestinationAddr)
}

func (x *IPPacketInfo) afterLoad() {}
func (x *IPPacketInfo) load(m state.Map) {
	m.Load("NIC", &x.NIC)
	m.Load("LocalAddr", &x.LocalAddr)
	m.Load("DestinationAddr", &x.DestinationAddr)
}

func (x *StdClock) beforeSave() {}
func (x *StdClock) save(m state.Map) {
	x.beforeSave()
}

func (x *StdClock) afterLoad() {}
func (x *StdClock) load(m state.Map) {
}

func init() {
	state.Register("pkg/tcpip.FullAddress", (*FullAddress)(nil), state.Fns{Save: (*FullAddress).save, Load: (*FullAddress).load})
	state.Register("pkg/tcpip.ControlMessages", (*ControlMessages)(nil), state.Fns{Save: (*ControlMessages).save, Load: (*ControlMessages).load})
	state.Register("pkg/tcpip.IPPacketInfo", (*IPPacketInfo)(nil), state.Fns{Save: (*IPPacketInfo).save, Load: (*IPPacketInfo).load})
	state.Register("pkg/tcpip.StdClock", (*StdClock)(nil), state.Fns{Save: (*StdClock).save, Load: (*StdClock).load})
}
